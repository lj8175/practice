// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.5.7 by WSRD Tencent.
// Generated from `/usr/local/resin_system.mqq.com/webapps/communication/taf/upload/joelliu/tpns.jce'
// **********************************************************************

package TPNS_PUSH_PROTOCOL;

public final class TpnsUninstallReq extends com.qq.taf.jce.JceStruct implements java.lang.Cloneable
{
    public String className()
    {
        return "TPNS_PUSH_PROTOCOL.TpnsUninstallReq";
    }

    public String fullClassName()
    {
        return "TPNS_PUSH_PROTOCOL.TpnsUninstallReq";
    }

    public TPNS_PUSH_PROTOCOL.AppInfo appInfo = null;

    public String token = "";

    public String deviceId = "";

    public long timestamp = 0;

    public TPNS_PUSH_PROTOCOL.AppInfo getAppInfo()
    {
        return appInfo;
    }

    public void  setAppInfo(TPNS_PUSH_PROTOCOL.AppInfo appInfo)
    {
        this.appInfo = appInfo;
    }

    public String getToken()
    {
        return token;
    }

    public void  setToken(String token)
    {
        this.token = token;
    }

    public String getDeviceId()
    {
        return deviceId;
    }

    public void  setDeviceId(String deviceId)
    {
        this.deviceId = deviceId;
    }

    public long getTimestamp()
    {
        return timestamp;
    }

    public void  setTimestamp(long timestamp)
    {
        this.timestamp = timestamp;
    }

    public TpnsUninstallReq()
    {
    }

    public TpnsUninstallReq(TPNS_PUSH_PROTOCOL.AppInfo appInfo, String token, String deviceId, long timestamp)
    {
        this.appInfo = appInfo;
        this.token = token;
        this.deviceId = deviceId;
        this.timestamp = timestamp;
    }

    public boolean equals(Object o)
    {
        if(o == null)
        {
            return false;
        }

        TpnsUninstallReq t = (TpnsUninstallReq) o;
        return (
            com.qq.taf.jce.JceUtil.equals(appInfo, t.appInfo) && 
            com.qq.taf.jce.JceUtil.equals(token, t.token) && 
            com.qq.taf.jce.JceUtil.equals(deviceId, t.deviceId) && 
            com.qq.taf.jce.JceUtil.equals(timestamp, t.timestamp) );
    }

    public int hashCode()
    {
        try
        {
            throw new Exception("Need define key first!");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return 0;
    }
    public java.lang.Object clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void writeTo(com.qq.taf.jce.JceOutputStream _os)
    {
        _os.write(appInfo, 0);
        _os.write(token, 1);
        _os.write(deviceId, 2);
        _os.write(timestamp, 3);
    }

    static TPNS_PUSH_PROTOCOL.AppInfo cache_appInfo;

    public void readFrom(com.qq.taf.jce.JceInputStream _is)
    {
        if(null == cache_appInfo)
        {
            cache_appInfo = new TPNS_PUSH_PROTOCOL.AppInfo();
        }
        this.appInfo = (TPNS_PUSH_PROTOCOL.AppInfo) _is.read(cache_appInfo, 0, true);
        this.token =  _is.readString(1, true);
        this.deviceId =  _is.readString(2, true);
        this.timestamp = (long) _is.read(timestamp, 3, false);
    }

    public void display(java.lang.StringBuilder _os, int _level)
    {
        com.qq.taf.jce.JceDisplayer _ds = new com.qq.taf.jce.JceDisplayer(_os, _level);
        _ds.display(appInfo, "appInfo");
        _ds.display(token, "token");
        _ds.display(deviceId, "deviceId");
        _ds.display(timestamp, "timestamp");
    }

    public void displaySimple(java.lang.StringBuilder _os, int _level)
    {
        com.qq.taf.jce.JceDisplayer _ds = new com.qq.taf.jce.JceDisplayer(_os, _level);
        _ds.displaySimple(appInfo, true);
        _ds.displaySimple(token, true);
        _ds.displaySimple(deviceId, true);
        _ds.displaySimple(timestamp, false);
    }

}

